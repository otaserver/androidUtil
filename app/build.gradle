// 服务端git打tag的脚本文件
// gradle执行有先后顺序的，因为plugin: 'com.android.library'需要其中task'，故需要放在其之前。
// 但是验证也不是啊？？？
apply from: "gittag.gradle"

apply plugin: 'com.android.library'
apply plugin: 'com.novoda.bintray-release'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        // 从mvnrepository查2020.07查0.9.2在jcenter是最新包
        classpath 'com.novoda:bintray-release:0.9.2'
    }
}

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        //println "=====这里才开始执行defaultConfig获取属性======="

        //buildConfigField标签可以自定义属性，可以直接在生成的BuildConfig.java代码里看属性
        buildConfigField "boolean", "IS_DEBUG", "false"

        //从logVersion的task中读取变量
        versionCode logVersion.gitCommitCount
        versionName logVersion.gitCurrentTag

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        disable('AllowBackup', 'GoogleAppIndexingWarning', 'MissingApplicationIcon')
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
//    androidTestImplementation 'androidx.test:core:1.2.0'

    //Gson序列号对象
    implementation 'com.google.code.gson:gson:2.8.6'

    // 注册lombok，减少无谓的set,get代码
    annotationProcessor 'org.projectlombok:lombok:1.18.16'

    // 必须加上，不然编译都不通过。因为是android项目，发布时不需要打包lombok。
    compileOnly 'org.projectlombok:lombok:1.18.16'
}

//自己打包jar的task方法
task makeReleaseJar(type: Jar, dependsOn: ['assembleRelease', 'logVersion']) {

    //gradle中的分组，不定义则放在other分组中。
    group = "otaserver"
    description = "自定义打包"

    doFirst {
        
        // 具体细节查看gradle文档：https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Jar.html#org.gradle.api.tasks.bundling.Jar:archiveName
        // archivesBaseName = "com.otaserver.androidUtil.${VERSION}"//这种写法可以不用加后缀jar。
        //${}写法是因为该表达式在双引号中。
        archivesBaseName = "com.otaserver.androidUtil.${logVersion.gitCurrentTag}"
        from('build/intermediates/javac/release/classes')
        manifest = project.manifest {
            from sharedManifest
        }
    }
}

//自定义属性写在manifest中
ext.sharedManifest = manifest {
    attributes("Implementation-Title": "Gradle",
            "Implementation-Version": logVersion.totalVersionName)
}

//注册执行makeReleaseJar任务前必须运行logVersion任务
//makeReleaseJar.dependsOn logVersion

//给bintray发布使用,暂时未使用。目前用命令行代替。
publish {
    userOrg = "otaserver"   //用户名
    repoName = 'sdk'        // repo远程仓库名字，不指明，默认上传到maven。在bintray有repo库的设置，最好一致。
    groupId = 'otaserver.opensdk'    //jcenter上的路径，建议使用github上用户名或者域名.会在maven-metadata.xml中体现。
    artifactId = 'AndroidUtil'       //会在maven-metadata.xml中体现。
    publishVersion = logVersion.gitCurrentTag   //使用logVersion的task的返回值
    desc = 'some utility for android development.'   //工具上传可能会有乱码
    website = 'https://github.com/otaserver/androidUtil'
}

tasks.withType(Javadoc) {//防止编码问题
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}


//引用包格式为：
//dependencies {
//    implementation 'otaserver.opensdk:AndroidUtil:0.0.5'
//}